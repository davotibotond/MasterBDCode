import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import numpy as np

### Input variables
data_directory = './data'  # Update with the actual path to your data
output_directory = "./outputs/individual_force_curves_2"  # Update with your desired output path
resistance_types = ['freeweight', 'keiser', 'quantum', 'norse']
sampling_frequency = 200  # Hz
dpi = 100

# Ensure the output directory exists
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Define color mapping for resistance types
color_mapping = {
    'freeweight': 'blue',
    'keiser': 'orange',
    'quantum': 'grey',
    'norse': 'green'
}

# Dictionary to map different terms to a unified terminology
term_mapping = {
    'Stang position': 'Barbell position',
    'Stang velocity': 'Barbell velocity',
    'Stang force (FP)': 'Barbell force (FP)',
}

# Function to preprocess and select valid data with specific handling for different exercises
def preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name):
    df.rename(columns=term_mapping, inplace=True)

    # Specific handling for "squat", "bench", and "row" exercises
    if exercise_name in ['squat', 'bench', 'row']:
        df['Barbell force (FP)'] = df[['Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton']].sum(axis=1)
    else:
        # Handle other exercises if needed
        pass
    
    df.drop(['Gulv stor sway X', 'Gulv stor sway Y', 'Gulv h sway X', 'Gulv h sway Y', 'Gulv v sway X', 'Gulv v sway Y',
             'Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton'], axis=1, inplace=True)

    # Normalize barbell position to percentage
    max_position = df['Barbell position'].max()
    df['Barbell position'] = (df['Barbell position'] / max_position) * 100

    # Define start and end of concentric phase using barbell velocity
    Rep_velocity_cutoff = 0.015
    Number_samples_cutoff1 = round(0.4 * sampling_frequency)
    Number_samples_cutoff2 = round(0.0067 * sampling_frequency)

    Rep_con_start = None
    Rep_con_end = None

    for i in range(len(df['timestamp']) - Number_samples_cutoff1 + 1):
        if all(df.loc[i:i + Number_samples_cutoff1 - 1, 'Barbell velocity'] > Rep_velocity_cutoff):
            Rep_con_start = i
            break

    if Rep_con_start is not None:
        for i in range(Rep_con_start, len(df['timestamp']) - Number_samples_cutoff2 + 1):
            if all(df.loc[i:i + Number_samples_cutoff2 - 1, 'Barbell velocity'] < Rep_velocity_cutoff):
                Rep_con_end = i + Number_samples_cutoff2 - 1
                break

    if Rep_con_start is None or Rep_con_end is None:
        print(f"Could not determine concentric phase for rep in file. Skipping this rep.")
        return None  # Invalid rep, skip this one

    df_con_phase = df.iloc[Rep_con_start:Rep_con_end]

    if df_con_phase['Barbell position'].max() <= 0.25:
        print(f"Max position is not greater than 0.25m. Skipping this rep.")
        return None  # Skip this rep if max position is not greater than 0.25m

    return df_con_phase

# Function to calculate peak force in 0-15% range for a single curve
def calculate_peak_force_0_15(curve, positions):
    peak_force_0_15 = np.max(curve[positions <= 15])
    peak_position = positions[np.argmax(curve[positions <= 15])]
    return peak_position, peak_force_0_15

# Function to calculate and plot the average force curve
def plot_average_force_curve(rep_data, output_directory, dpi, exercise_modality, specific_subject, pdf):
    common_positions = np.linspace(0, 100, num=100)
    interpolated_data = [np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in rep_data]
    mean_curve = np.mean(interpolated_data, axis=0)

    plt.figure(figsize=(10, 6), dpi=dpi)
    plt.plot(common_positions, mean_curve, label="Average", color='black')

    # Calculate and mark peak average force in 0-15% range
    peak_position, peak_average_force_0_15 = calculate_peak_force_0_15(mean_curve, common_positions)
    plt.scatter(peak_position, peak_average_force_0_15, color='red')
    plt.annotate(f'{peak_average_force_0_15:.2f} N', (peak_position, peak_average_force_0_15), textcoords="offset points", xytext=(10,-10), ha='center')

    # Additional plot formatting
    plt.title(f"Average Force Curve for {specific_subject} - {exercise_modality}")
    plt.xlabel('Barbell Position (%)')
    plt.ylabel('Force (N)')
    plt.legend()
    plt.grid(True)

    pdf.savefig()  # saves the current figure into a pdf page
    plt.close()

# Modified function to plot force curves for each repetition with peak force marking and print peak forces in the terminal
def plot_rep_force_curves(rep_data, output_directory, dpi, exercise_modality, specific_subject):
    pdf_path = os.path.join(output_directory, f"{specific_subject}_{exercise_modality}_force_curves.pdf")
    peak_forces = []  # List to store peak forces for each rep

    with PdfPages(pdf_path) as pdf:
        for rep_number, curve in enumerate(rep_data):
            plt.figure(figsize=(10, 6), dpi=dpi)
            positions = np.linspace(0, 100, len(curve))
            plt.plot(positions, curve, label=f"Rep {rep_number+1}", color=color_mapping.get(exercise_modality.split('_')[-1], 'black'))

            # Calculate and store peak force in 0-15% range
            peak_position, peak_force_0_15 = calculate_peak_force_0_15(curve, positions)
            peak_forces.append(peak_force_0_15)

            # Mark peak force in 0-15% range on the plot
            plt.scatter(peak_position, peak_force_0_15, color='red')
            plt.annotate(f'{peak_force_0_15:.2f} N', (peak_position, peak_force_0_15), textcoords="offset points", xytext=(10,-10), ha='center')

            plt.title(f"Force Curve for {specific_subject} - {exercise_modality} - Rep {rep_number+1}")
            plt.xlabel('Barbell Position (%)')
            plt.ylabel('Force (N)')
            plt.legend()
            plt.grid(True)
            
            pdf.savefig()  # saves the current figure into a pdf page
            plt.close()

        # Calculate and print the average and standard deviation of peak forces
        average_peak_force = np.mean(peak_forces)
        std_dev_peak_force = np.std(peak_forces)
        print(f"Subject {specific_subject}, {exercise_modality}: "
              f"Average Peak Force 0-15% = {average_peak_force:.2f} N ± {std_dev_peak_force:.2f}")

        # Plot the average curve
        plot_average_force_curve(rep_data, output_directory, dpi, exercise_modality, specific_subject, pdf)

    return peak_forces


# Modified loop to process and plot data for individual repetitions
subject_modality_averages = {}  # Dictionary to store average peak forces per subject per modality

for subject_num in range(1, 16):
    specific_subject = f'subject_{subject_num}'
    subject_path = os.path.join(data_directory, specific_subject)

    if os.path.isdir(subject_path):
        subject_modality_averages[specific_subject] = {}

        for exercise_folder in os.listdir(subject_path):
            exercise_path = os.path.join(subject_path, exercise_folder)
            if os.path.isdir(exercise_path):
                exercise_name = exercise_folder.lower()

                for resistance_type in resistance_types:
                    resistance_path = os.path.join(exercise_path, resistance_type)

                    if os.path.isdir(resistance_path):
                        rep_data = []
                        for file_name in os.listdir(resistance_path):
                            if file_name.endswith('.csv'):
                                file_path = os.path.join(resistance_path, file_name)
                                df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                processed_df = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name)
                                if processed_df is not None:
                                    rep_data.append(processed_df['Barbell force (FP)'].values)

                        if rep_data:
                            exercise_modality = f"{exercise_name}_{resistance_type}"
                            peak_forces = plot_rep_force_curves(rep_data, output_directory, dpi, exercise_modality, specific_subject)

                            # Calculate and store the average peak force for this subject and modality
                            if peak_forces:
                                average_peak_force = np.mean(peak_forces)
                                subject_modality_averages[specific_subject][exercise_modality] = average_peak_force
                                print(f"Subject {specific_subject}, {exercise_modality}: Average Peak Force 0-15% = {average_peak_force:.2f} N")

# Define all exercise modalities
all_exercise_modalities = [f"{exercise}_{resistance}" for exercise in ['bench', 'squat', 'row'] for resistance in resistance_types]

# Compute and print overall averages and standard deviation for each exercise modality
overall_modality_averages = {modality: 0 for modality in all_exercise_modalities}
overall_modality_std_devs = {modality: 0 for modality in all_exercise_modalities}

for modality in all_exercise_modalities:
    modality_values = [subject_modality_averages[subject].get(modality, 0) for subject in subject_modality_averages if modality in subject_modality_averages[subject]]
    valid_values = [v for v in modality_values if v > 0]  # Filter out invalid values
    overall_modality_averages[modality] = np.mean(valid_values)
    overall_modality_std_devs[modality] = np.std(valid_values)

for modality, average in overall_modality_averages.items():
    std_dev = overall_modality_std_devs[modality]
    print(f"Overall Average Peak Force 0-15% for {modality}: {average:.2f} N ± {std_dev:.2f}")


# Function to calculate mean force curve and peak force in 0-15% range
def calculate_mean_force_curve(force_data):
    # Define common positions for interpolation (100 points for 0-100%)
    common_positions = np.linspace(0, 100, num=100)
    # Interpolate all force data to the common positions
    interpolated_data = [np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in force_data]
    mean_curve = np.mean(interpolated_data, axis=0)
    return common_positions, mean_curve

# New function to generate PDFs
def generate_exercise_pdf(all_data, output_directory, dpi):
    # Create a PDF for each exercise
    for exercise in ['squat', 'bench', 'row']:
        # Initialize a dictionary to hold all data for the current exercise
        exercise_data = {modality: [] for modality in resistance_types}
        
        # Aggregate data for the current exercise across all subjects and modalities
        for subject_num in range(1, 16):
            specific_subject = f'subject_{subject_num}'
            subject_path = os.path.join(data_directory, specific_subject)
            if os.path.isdir(subject_path):
                exercise_path = os.path.join(subject_path, exercise)
                if os.path.isdir(exercise_path):
                    for resistance_type in resistance_types:
                        resistance_path = os.path.join(exercise_path, resistance_type)
                        if os.path.isdir(resistance_path):
                            for file_name in os.listdir(resistance_path):
                                if file_name.endswith('.csv'):
                                    file_path = os.path.join(resistance_path, file_name)
                                    df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                    processed_df = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise)
                                    if processed_df is not None:
                                        exercise_data[resistance_type].append(processed_df['Barbell force (FP)'].values)
        
        # Plot the mean force curve for each modality in a single graph
        pdf_filename = f"{exercise}_mean_force_curves.pdf"
        pdf_path = os.path.join(output_directory, pdf_filename)
        with PdfPages(pdf_path) as pdf:
            plt.figure(figsize=(10, 6), dpi=dpi)
            for modality, force_data in exercise_data.items():
                if force_data:
                    common_positions, mean_curve = calculate_mean_force_curve(force_data)
                    plt.plot(common_positions, mean_curve, label=modality, color=color_mapping[modality])
                    
                    # Mark the peak force in 0-15% range
                    peak_position, peak_force_0_15 = calculate_peak_force_0_15(mean_curve, common_positions)
                    plt.scatter(peak_position, peak_force_0_15, color='red')
                    plt.annotate(f'{peak_force_0_15:.2f} N', (peak_position, peak_force_0_15), textcoords="offset points", xytext=(10,-10), ha='center')

            plt.title(f"Mean Force Curve across all subjects - {exercise}")
            plt.xlabel('Barbell Position (%)')
            plt.ylabel('Force (N)')
            plt.legend()
            plt.grid(True)
            pdf.savefig()  # saves the current figure into a pdf page
            plt.close()

# Call the new function to generate the PDFs
all_data = {}  # This will contain all the force data for each subject
generate_exercise_pdf(all_data, output_directory, dpi)
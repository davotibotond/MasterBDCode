"""
Created on Thu Dec 21 15:16:39 2023

@author: botonddavoti
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from matplotlib.backends.backend_pdf import PdfPages
import spm1d
import itertools

### Input variables
sampling_frequency = 200  # Hz
data_directory = './data'  # Update with the actual path to your data
output_directory = "./outputs/SPM Analysis"  # Update with your desired output path
resistance_types = ['freeweight', 'keiser', 'quantum', 'norse']
dpi = 100

# Define color mapping for resistance types
color_mapping = {
    'freeweight': 'blue',
    'keiser': 'orange',
    'quantum': 'grey',
    'norse': 'green'
}

### Ensure the output directory exists
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

### Dictionary to map different terms to a unified terminology
term_mapping = {
    'Stang position': 'Barbell position',
    'Stang velocity': 'Barbell velocity',
    'Stang force (FP)': 'Barbell force (FP)',
}

# Function to preprocess and select valid data with specific handling for different exercises
def preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name):
    df.rename(columns=term_mapping, inplace=True)

    # Specific handling for "squat" exercise
    if exercise_name in ['squat', 'bench', 'row']:
        df['Barbell force (FP)'] = df[['Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton']].sum(axis=1)
    else:  # For other exercises
        # Handle other exercises if needed
        pass
    
    df.drop(['Gulv stor sway X', 'Gulv stor sway Y', 'Gulv h sway X', 'Gulv h sway Y', 'Gulv v sway X', 'Gulv v sway Y',
             'Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton'], axis=1, inplace=True)

    # Normalize barbell position to percentage
    max_position = df['Barbell position'].max()
    df['Barbell position'] = (df['Barbell position'] / max_position) * 100

    # Define start and end of concentric phase using barbell velocity
    Rep_velocity_cutoff = 0.015
    Number_samples_cutoff1 = round(0.4 * sampling_frequency)
    Number_samples_cutoff2 = round(0.0067 * sampling_frequency)

    Rep_con_start = None
    Rep_con_end = None

    for i in range(len(df['timestamp']) - Number_samples_cutoff1 + 1):
        if all(df.loc[i:i + Number_samples_cutoff1 - 1, 'Barbell velocity'] > Rep_velocity_cutoff):
            Rep_con_start = i
            break

    if Rep_con_start is not None:
        for i in range(Rep_con_start, len(df['timestamp']) - Number_samples_cutoff2 + 1):
            if all(df.loc[i:i + Number_samples_cutoff2 - 1, 'Barbell velocity'] < Rep_velocity_cutoff):
                Rep_con_end = i + Number_samples_cutoff2 - 1
                break

    if Rep_con_start is None or Rep_con_end is None:
        print(f"Could not determine concentric phase for rep in file. Skipping this rep.")
        return None  # Invalid rep, skip this one

    df_con_phase = df.iloc[Rep_con_start:Rep_con_end]

    if df_con_phase['Barbell position'].max() <= 0.25:
        print(f"Max position is not greater than 0.25m. Skipping this rep.")
        return None  # Skip this rep if max position is not greater than 0.25m

    return df_con_phase

# Initialize the data structure to store all preprocessed data
all_data = {}

# Main processing loop with specific handling for different exercises
for subject_folder in os.listdir(data_directory):
    subject_path = os.path.join(data_directory, subject_folder)
    if os.path.isdir(subject_path):
        for exercise_folder in os.listdir(subject_path):
            exercise_path = os.path.join(subject_path, exercise_folder)
            if os.path.isdir(exercise_path):
                exercise_name = exercise_folder.lower()
                exercise_data = {}
                for resistance_type in resistance_types:
                    resistance_path = os.path.join(exercise_path, resistance_type)
                    if os.path.isdir(resistance_path):
                        df_dictionary = {}
                        for file_name in os.listdir(resistance_path):
                            if file_name.endswith('.csv'):
                                file_path = os.path.join(resistance_path, file_name)
                                df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                df_con_phase = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name)
                                if df_con_phase is not None:
                                    df_key_name = f"{resistance_type}_{file_name}"
                                    df_dictionary[df_key_name] = df_con_phase
                        if df_dictionary:
                            exercise_data[resistance_type] = df_dictionary
                if exercise_data:
                    all_data[exercise_name] = exercise_data

# Function to identify sticking regions in the exercises squat and bench press
def mark_lowest_position_in_range(mean_curve, positions, start_pct, end_pct):
    start_idx = int(start_pct / 100 * len(positions))
    end_idx = int(end_pct / 100 * len(positions))
    segment = mean_curve[start_idx:end_idx]
    min_idx = np.argmin(segment) + start_idx
    min_value = mean_curve[min_idx]
    min_position = positions[min_idx]
    return min_value, min_position

# Function to calculate mean and standard deviation force curves
def calculate_mean_std_force_curve(force_data):
    common_positions = np.linspace(0, 100, num=100)
    interpolated_data = [np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in force_data if len(d) > 1]
    if not interpolated_data:
        return common_positions, np.array([]), np.array([])  # Return empty arrays if no valid data
    mean_curve = np.mean(interpolated_data, axis=0)
    std_dev_curve = np.std(interpolated_data, axis=0)
    return common_positions, mean_curve, std_dev_curve

# Function to plot the mean force curve with standard deviation shading
def plot_with_std_dev(ax, positions, mean_curve, std_dev_curve, label, color):
    ax.plot(positions, mean_curve, label=label, color=color)
    ax.fill_between(positions, mean_curve - std_dev_curve, mean_curve + std_dev_curve, color=color, alpha=0.2)

# Function to generate and save combined SPM analysis and mean force curve plots
def generate_combined_pdf(all_data, output_directory, dpi, resistance_types):
    common_positions = np.linspace(0, 100, num=100)  # Define common positions for interpolation
    
    for exercise_name, exercise_data in all_data.items():
        # Different pair sets for 'squat' vs 'bench' and 'row'
        if exercise_name == 'squat':
            pairs_sets = [[('freeweight', 'keiser'), ('freeweight', 'quantum'), ('keiser', 'quantum')]]
        else:  # 'bench' and 'row'
            pairs_sets = [
                [('freeweight', 'keiser'), ('freeweight', 'norse'), ('freeweight', 'quantum')],
                [('keiser', 'norse'), ('keiser', 'quantum'), ('quantum', 'norse')]
            ]
        
        pdf_filename = f"{exercise_name}_combined_analysis.pdf"
        pdf_path = os.path.join(output_directory, pdf_filename)
        with PdfPages(pdf_path) as pdf:
            for page, pairs in enumerate(pairs_sets):
                fig, axs = plt.subplots(2, 3, figsize=(12, 8.5), gridspec_kw={'height_ratios': [1.0, 0.5]}, dpi=dpi)
                fig.suptitle(f"{exercise_name.capitalize()} Analysis - Page {page + 1}")

                # Adjust horizontal spacing between the subplots
                plt.subplots_adjust(wspace=0.5)  # Adjust this value to increase horizontal space
                plt.subplots_adjust(hspace=0.5)  # Increase the vertical space between rows of subplots                

                # Plotting the pairs
                for i, pair in enumerate(pairs):
                    ax_mfc = axs[0, i]
                    ax_spm = axs[1, i]

                    # Set y-axis limits based on the exercise name
                    if exercise_name == 'squat':
                        ax_mfc.set_ylim(1000, 2600)
                    elif exercise_name == 'bench':
                        ax_mfc.set_ylim(150, 1000)
                    elif exercise_name == 'row':
                        ax_mfc.set_ylim(100, 1100)

                    # Aggregate data for the current exercise across all subjects and modalities
                    force_data_pair = {rt: [] for rt in pair}
                    for subject_num in range(1, 16):
                        specific_subject = f'subject_{subject_num}'
                        subject_path = os.path.join(data_directory, specific_subject)
                        if os.path.isdir(subject_path):
                            exercise_path = os.path.join(subject_path, exercise_name)
                            if os.path.isdir(exercise_path):
                                for rt in pair:
                                    resistance_path = os.path.join(exercise_path, rt)
                                    if os.path.isdir(resistance_path):
                                        for file_name in os.listdir(resistance_path):
                                            if file_name.endswith('.csv'):
                                                file_path = os.path.join(resistance_path, file_name)
                                                df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                                processed_df = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name)
                                                if processed_df is not None:
                                                    force_data_pair[rt].append(processed_df['Barbell force (FP)'].values)
                    
                    # Plot mean force curves with standard deviation shading
                    for rt in pair:
                        positions, mean_curve, std_dev_curve = calculate_mean_std_force_curve(force_data_pair[rt])
                        if mean_curve.size > 0:
                            plot_with_std_dev(ax_mfc, positions, mean_curve, std_dev_curve, f'{rt} Mean', color_mapping[rt])
                            if exercise_name in ['squat', 'bench']:
                                min_value, min_position = mark_lowest_position_in_range(mean_curve, positions, 20, 60)
                                ax_mfc.scatter(min_position, min_value, color='black')  # Mark on the curve

                    ax_mfc.set_title(f'Force {pair[0]} vs {pair[1]}')
                    ax_mfc.legend()

                     # Adding labels for x-axis and y-axis
                    ax_mfc.set_xlabel('Barbell Position (%)')
                    ax_mfc.set_ylabel('Force (N)')


                    # Perform and plot SPM analysis in the second row
                    ax_spm = axs[1, i % 3]
                    data1 = force_data_pair[pair[0]]
                    data2 = force_data_pair[pair[1]]
                    spm_data1 = np.array([np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in data1])
                    spm_data2 = np.array([np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in data2])

                    if len(spm_data1) > 1 and len(spm_data2) > 1:
                        spm_t = spm1d.stats.ttest2(spm_data1, spm_data2, equal_var=True).inference(0.05)
                        spm_t.plot(ax=ax_spm)
                        spm_t.plot_threshold_label(ax=ax_spm)
                        # Check if any value in spm_t.p is less than 0.05
                        if any(p_value < 0.05 for p_value in spm_t.p):
                            spm_t.plot_p_values(ax=ax_spm)
                        ax_spm.set_title(f'SPM {pair[0]} vs {pair[1]}')

                pdf.savefig(fig)  # Save the current page
                plt.close(fig)    # Close the figure to free memory
            

# Call the function to generate the PDFs
# Assuming all_data is populated as per your existing logic
generate_combined_pdf(all_data, output_directory, dpi, resistance_types)

print("Combined PDF generation complete. Check the output directory for the PDFs.")

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages

### Input variables
data_directory = './data'  # Update with the actual path to your data
output_directory = "./outputs/individual_force_curves"  # Update with your desired output path
resistance_types = ['freeweight', 'keiser', 'quantum', 'norse']
sampling_frequency = 200  # Hz
dpi = 100

# Ensure the output directory exists
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Define color mapping for resistance types
color_mapping = {
    'freeweight': 'blue',
    'keiser': 'orange',
    'quantum': 'grey',
    'norse': 'green'
}

# Dictionary to map different terms to a unified terminology
term_mapping = {
    'Stang position': 'Barbell position',
    'Stang velocity': 'Barbell velocity',
    'Stang force (FP)': 'Barbell force (FP)',
}

# Function to preprocess and select valid data with specific handling for different exercises
def preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name):
    df.rename(columns=term_mapping, inplace=True)

    # Specific handling for "squat", "bench", and "row" exercises
    if exercise_name in ['squat', 'bench', 'row']:
        df['Barbell force (FP)'] = df[['Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton']].sum(axis=1)
    else:
        # Handle other exercises if needed
        pass
    
    df.drop(['Gulv stor sway X', 'Gulv stor sway Y', 'Gulv h sway X', 'Gulv h sway Y', 'Gulv v sway X', 'Gulv v sway Y',
             'Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton'], axis=1, inplace=True)

    # Normalize barbell position to percentage
    max_position = df['Barbell position'].max()
    df['Barbell position'] = (df['Barbell position'] / max_position) * 100

    # Define start and end of concentric phase using barbell velocity
    Rep_velocity_cutoff = 0.015
    Number_samples_cutoff1 = round(0.4 * sampling_frequency)
    Number_samples_cutoff2 = round(0.0067 * sampling_frequency)

    Rep_con_start = None
    Rep_con_end = None

    for i in range(len(df['timestamp']) - Number_samples_cutoff1 + 1):
        if all(df.loc[i:i + Number_samples_cutoff1 - 1, 'Barbell velocity'] > Rep_velocity_cutoff):
            Rep_con_start = i
            break

    if Rep_con_start is not None:
        for i in range(Rep_con_start, len(df['timestamp']) - Number_samples_cutoff2 + 1):
            if all(df.loc[i:i + Number_samples_cutoff2 - 1, 'Barbell velocity'] < Rep_velocity_cutoff):
                Rep_con_end = i + Number_samples_cutoff2 - 1
                break

    if Rep_con_start is None or Rep_con_end is None:
        print(f"Could not determine concentric phase for rep in file. Skipping this rep.")
        return None  # Invalid rep, skip this one

    df_con_phase = df.iloc[Rep_con_start:Rep_con_end]

    if df_con_phase['Barbell position'].max() <= 0.25:
        print(f"Max position is not greater than 0.25m. Skipping this rep.")
        return None  # Skip this rep if max position is not greater than 0.25m

    return df_con_phase

# Function to plot force curves for each repetition
def plot_rep_force_curves(rep_data, output_directory, dpi, exercise_modality, specific_subject):
    pdf_path = os.path.join(output_directory, f"{specific_subject}_{exercise_modality}_force_curves.pdf")
    with PdfPages(pdf_path) as pdf:
        for rep_number, curve in enumerate(rep_data):
            plt.figure(figsize=(10, 6), dpi=dpi)
            positions = np.linspace(0, 100, len(curve))
            plt.plot(positions, curve, label=f"Rep {rep_number+1}", color=color_mapping.get(exercise_modality.split('_')[-1], 'black'))

            # Additional plot formatting
            plt.title(f"Force Curve for {specific_subject} - {exercise_modality} - Rep {rep_number+1}")
            plt.xlabel('Barbell Position (%)')
            plt.ylabel('Force (N)')
            plt.legend()
            plt.grid(True)
            
            pdf.savefig()  # saves the current figure into a pdf page
            plt.close()

# Modified loop to process and plot data for individual repetitions
for subject_num in range(1, 16):
    specific_subject = f'subject_{subject_num}'
    subject_path = os.path.join(data_directory, specific_subject)

    if os.path.isdir(subject_path):
        for exercise_folder in os.listdir(subject_path):
            exercise_path = os.path.join(subject_path, exercise_folder)
            if os.path.isdir(exercise_path):
                exercise_name = exercise_folder.lower()
                for resistance_type in resistance_types:
                    resistance_path = os.path.join(exercise_path, resistance_type)
                    if os.path.isdir(resistance_path):
                        rep_data = []
                        for file_name in os.listdir(resistance_path):
                            if file_name.endswith('.csv'):
                                file_path = os.path.join(resistance_path, file_name)
                                df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                processed_df = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name)
                                if processed_df is not None:
                                    rep_data.append(processed_df['Barbell force (FP)'].values)

                        if rep_data:
                            exercise_modality = f"{exercise_name}_{resistance_type}"
                            plot_rep_force_curves(rep_data, output_directory, dpi, exercise_modality, specific_subject)

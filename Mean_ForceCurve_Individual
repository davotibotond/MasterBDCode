import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

### Input variables
data_directory = './data'  # Update with the actual path to your data
output_directory = "./outputs/individual_force_0-10"  # Update with your desired output path
resistance_types = ['freeweight', 'keiser', 'quantum', 'norse']
sampling_frequency = 200  # Hz
dpi = 100

# Ensure the output directory exists
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

# Define color mapping for resistance types
color_mapping = {
    'freeweight': 'blue',
    'keiser': 'orange',
    'quantum': 'grey',
    'norse': 'green'
}

# Dictionary to map different terms to a unified terminology
term_mapping = {
    'Stang position': 'Barbell position',
    'Stang velocity': 'Barbell velocity',
    'Stang force (FP)': 'Barbell force (FP)',
}

# Function to preprocess and select valid data with specific handling for different exercises
def preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name):
    df.rename(columns=term_mapping, inplace=True)
    if exercise_name in ['squat', 'bench', 'row']:
        df['Barbell force (FP)'] = df[['Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton']].sum(axis=1)
    else:
        pass  # Additional handling for other exercises if necessary
    
    df.drop(['Gulv stor sway X', 'Gulv stor sway Y', 'Gulv h sway X', 'Gulv h sway Y', 'Gulv v sway X', 'Gulv v sway Y',
             'Gulv stor Newton', 'Gulv h Newton', 'Gulv v Newton'], axis=1, inplace=True)
    max_position = df['Barbell position'].max()
    df['Barbell position'] = (df['Barbell position'] / max_position) * 100
    return df

# Function to calculate mean force curve and peak force in 0-10% range
def calculate_mean_force_curve(data):
    common_positions = np.linspace(0, 100, num=100)  # Define common positions for interpolation
    interpolated_data = [np.interp(common_positions, np.linspace(0, 100, len(d)), d) for d in data]
    mean_curve = np.mean(interpolated_data, axis=0)
    peak_force_0_10 = np.max(mean_curve[common_positions <= 10])
    return common_positions, mean_curve, peak_force_0_10

# Function to plot mean force curves for each exercise modality
def plot_mean_force_curves(mean_curves, output_directory, dpi):
    for exercise_modality, (positions, curve, peak_force_0_10) in mean_curves.items():
        plt.figure(figsize=(10, 6), dpi=dpi)
        plt.plot(positions, curve, label=exercise_modality, color=color_mapping.get(exercise_modality.split('_')[-1], 'black'))
        
        # Mark the peak force in 0-10% range
        peak_position = positions[np.argmax(curve[positions <= 10])]
        plt.scatter(peak_position, peak_force_0_10, color='red', label=f'Peak Force (0-10%): {peak_force_0_10:.2f} N')
        plt.annotate(f'{peak_force_0_10:.2f} N', (peak_position, peak_force_0_10), textcoords="offset points", xytext=(10,-10), ha='center')

        plt.title(f"Mean Force Curve for {specific_subject} - {exercise_modality}")
        plt.xlabel('Barbell Position (%)')
        plt.ylabel('Force (N)')
        plt.legend()
        plt.grid(True)
        plt.savefig(os.path.join(output_directory, f"{specific_subject}_{exercise_modality}_mean_force_curve.png"))
        plt.close()

# Loop over each subject
for subject_num in range(1, 16):
    specific_subject = f'subject_{subject_num}'
    subject_path = os.path.join(data_directory, specific_subject)

    mean_curves = {}

    if os.path.isdir(subject_path):
        for exercise_folder in os.listdir(subject_path):
            exercise_path = os.path.join(subject_path, exercise_folder)
            if os.path.isdir(exercise_path):
                exercise_name = exercise_folder.lower()
                for resistance_type in resistance_types:
                    resistance_path = os.path.join(exercise_path, resistance_type)
                    if os.path.isdir(resistance_path):
                        force_data = []
                        for file_name in os.listdir(resistance_path):
                            if file_name.endswith('.csv'):
                                file_path = os.path.join(resistance_path, file_name)
                                df = pd.read_csv(file_path, delimiter=';', decimal=",")
                                df = preprocess_and_select_data(df, term_mapping, sampling_frequency, exercise_name)
                                force_data.append(df['Barbell force (FP)'].values)

                        if force_data:
                            exercise_modality = f"{exercise_name}_{resistance_type}"
                            positions, mean_curve, peak_force_0_10 = calculate_mean_force_curve(force_data)
                            mean_curves[exercise_modality] = (positions, mean_curve, peak_force_0_10)

        # Plotting the mean force curves for the current subject
        plot_mean_force_curves(mean_curves, output_directory, dpi)

